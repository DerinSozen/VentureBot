name: Deploy to VM on Main Push

on:
  push:
    branches:
      - api-server-with-stream-lit-frontend # Or your primary deployment branch

jobs:
  deploy:
    name: Deploy to Radiant Cloud VM
    runs-on: ubuntu-latest # The type of machine to run the job on

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            # Define variables for paths and names on the VM
            PROJECT_DIR="/home/ubuntu/githubs"  # <-- IMPORTANT: VERIFY AND SET THIS TO YOUR PROJECT PATH ON THE VM
            IMAGE_NAME="venturebots"
            CONTAINER_NAME="venturebots-app"
            echo "VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}"
            echo "${{ secrets.VM_SSH_KEY }}" > test.txt
            cat test.txt
            echo "VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}"

            echo "--- Checking for Docker installation ---"
            if ! command -v docker &> /dev/null
            then
                echo "Docker could not be found on the VM. Please install Docker and try again."
                exit 1
            fi
            if ! docker ps &> /dev/null
            then
                echo "Docker daemon is not running or user cannot access it. Please check Docker setup on the VM."
                exit 1
            fi
            echo "Docker is available and running."

            echo "--- Navigating to project directory: $PROJECT_DIR ---"
            # Create directory if it doesn't exist (for first-time deployment)
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR" || { echo "Failed to navigate to project directory. Exiting."; exit 1; }

            echo "--- Initializing Git repo or ensuring it exists ---"
            if [ ! -d ".git" ]; then
              echo "Cloning repository into $PROJECT_DIR..."
              git clone "https://github.com/${{ github.repository }}.git" . # Clone into current dir
            else
              current_remote_url=$(git config --get remote.origin.url)
              expected_remote_url="https://github.com/${{ github.repository }}.git"
              if [ "$current_remote_url" != "$expected_remote_url" ]; then
                git remote set-url origin "$expected_remote_url" || git remote add origin "$expected_remote_url"
              fi
            fi

            # Get the branch name from GitHub context
            CURRENT_BRANCH="${{ github.ref_name }}"
            echo "--- Preparing to deploy branch: $CURRENT_BRANCH ---"

            # Fetch all updates from the remote origin
            echo "Fetching all remote branches and tags..."
            git fetch origin --prune

            # Ensure the target branch exists locally and is up-to-date
            echo "Checking out branch $CURRENT_BRANCH..."
            git checkout "$CURRENT_BRANCH"
            
            echo "Resetting $CURRENT_BRANCH to origin/$CURRENT_BRANCH..."
            git reset --hard "origin/$CURRENT_BRANCH"
            
            # Optional: Clean up untracked files that might interfere (use with caution)
            # echo "Cleaning workspace..."
            # git clean -fdx
            ls -alrt
            echo "--- Creating/Updating .env file on VM ---"
            echo "${{ secrets.ENV }}" > .env # Creates .env in the current directory ($PROJECT_DIR)
            echo "Project dir: $PROJECT_DIR"
            # vi .env
            echo "--- Verifying Dockerfile exists ---"
            if [ ! -f Dockerfile ]; then
                echo "Dockerfile not found in $PROJECT_DIR after git operations! Listing files:"
                ls -la
                exit 1
            fi
            echo "Dockerfile found."

            echo "--- Building and starting multi-container application ---"
            
            # Stop and remove existing containers
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # Remove old images to ensure fresh build
            docker system prune -f
            
            # Build and start containers
            echo "Building and starting containers..."
            docker-compose up -d --build
            
            echo "--- Multi-container application started ---"
            echo "Frontend (Streamlit): http://$(curl -s ifconfig.me)"
            echo "Backend API: Internal only (http://backend:8000)"

            echo "--- Verifying multi-container startup ---"
            sleep 30 # Wait for 30 seconds to allow all services to initialize

            # Check if both containers are running
            if docker-compose ps | grep -q "Up"; then
                echo "✅ Multi-container application started successfully"
                
                # Check service health
                echo "--- Checking service health ---"
                
                # Check frontend health
                if curl -f http://localhost/_stcore/health > /dev/null 2>&1; then
                    echo "✅ Frontend (Streamlit) is healthy"
                else
                    echo "❌ Frontend health check failed"
                fi
                
                # Show container status
                echo "--- Container status ---"
                docker-compose ps
                
                # Show recent logs
                echo "--- Recent logs ---"
                echo "Backend logs:"
                docker-compose logs --tail 20 backend
                echo "Frontend logs:"
                docker-compose logs --tail 20 frontend
                
                echo "--- Deployment to VM completed successfully! ---"
                echo "🌐 Frontend (Streamlit): http://$(curl -s ifconfig.me 2>/dev/null || echo 'VM_IP')"
                echo "🔧 Backend API: Internal network only"
                echo "📋 Container Status: docker-compose ps"
            else
                echo "Error: Multi-container application did not start correctly."
                echo "--- Container status ---"
                docker-compose ps
                
                echo "--- Backend logs ---"
                docker-compose logs backend
                
                echo "--- Frontend logs ---"
                docker-compose logs frontend
                
                exit 1 # Explicitly fail the deployment step
            fi 